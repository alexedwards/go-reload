#!/bin/bash
#
# go-reload
#
# Bash script for automatically reloading Go programs. It acts as a wrapper 
# for go run, stopping and restarting the process whenever a .go file in 
# your current directory or $GOPATH/src folder is saved.
# 
# The MIT License (MIT)
# Copyright (c) 2013 Alex Edwards
#
# https://github.com/alexedwards/go-reload
#

if [ "$#" -ne 1 ]
then
	echo "Usage: $0 <go script>"
	exit 1
fi

[ ! -f $1 ] && echo "File $1 doesn't exist!?" && exit 1

# Watch all *.go files in the specified directory
# Call the restart function when they are saved
function monitor() {
  inotifywait -q -m -r -e close_write --exclude '[^g][^o]$' $1 |
  while read line; do
    restart
  done
}

# Terminate and rerun the main Go program
function restart {
  if [ "$(pidof $PROCESS_NAME)" ]; then
    killall -q -w -9 $PROCESS_NAME
  fi
  echo ">> Reloading..."
  go run $FILE_PATH $ARGS &
}

# Make sure all background processes get terminated
function close {
  killall -q -w -9 inotifywait
  exit 0
}

trap close INT
echo "== Go-reload"
echo ">> Watching directories, CTRL+C to stop"

FILE_PATH=$1
FILE_NAME=$(basename $FILE_PATH)
PROCESS_NAME=${FILE_NAME%%.*}
FILE_DIR=$(dirname $(readlink -e $FILE_PATH))

shift
ARGS=$@

# Start the main Go program
go run $FILE_PATH $ARGS &

# Monitor the /src directories in all directories on the GOPATH
OIFS="$IFS"
IFS=':'
FILE_CWD_FLAG=false
for path in $GOPATH
do
	monitor $path/src &
	if [[ $FILE_DIR == "$path/"* ]]
	then
		FILE_CWD_FLAG=true
	fi
done
IFS="$OIFS"

# Monitor the current directory
if ! $FILE_CWD_FLAG
then
	monitor .
fi
